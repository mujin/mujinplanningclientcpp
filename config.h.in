/** \file config.h
    \brief Defines MUJIN Controller Client installation-specific information.
*/
#ifndef MUJINPLANNINGCLIENT_DEFINITIONS_H
#define MUJINPLANNINGCLIENT_DEFINITIONS_H

#if defined(_WIN32) || defined(__CYGWIN__) || defined(_MSC_VER)
  #define MUJINPLANNINGCLIENT_HELPER_DLL_IMPORT __declspec(dllimport)
  #define MUJINPLANNINGCLIENT_HELPER_DLL_EXPORT __declspec(dllexport)
  #define MUJINPLANNINGCLIENT_HELPER_DLL_LOCAL
#else
  #if __GNUC__ >= 4
    #define MUJINPLANNINGCLIENT_HELPER_DLL_IMPORT __attribute__ ((visibility("default")))
    #define MUJINPLANNINGCLIENT_HELPER_DLL_EXPORT __attribute__ ((visibility("default")))
    #define MUJINPLANNINGCLIENT_HELPER_DLL_LOCAL  __attribute__ ((visibility("hidden")))
  #else
    #define MUJINPLANNINGCLIENT_HELPER_DLL_IMPORT
    #define MUJINPLANNINGCLIENT_HELPER_DLL_EXPORT
    #define MUJINPLANNINGCLIENT_HELPER_DLL_LOCAL
  #endif
#endif

// Now we use the generic helper definitions above to define MUJINPLANNINGCLIENT_API and MUJINPLANNINGCLIENT_LOCAL.
// MUJINPLANNINGCLIENT_API is used for the public API symbols. It either DLL imports or DLL exports (or does nothing for static build)
// MUJINPLANNINGCLIENT_LOCAL is used for non-api symbols.
#if defined(MUJINPLANNINGCLIENT_DLL) || defined(MUJINPLANNINGCLIENT_CORE_DLL) // defined if OpenRAVE is compiled as a DLL
  #ifdef MUJINPLANNINGCLIENT_DLL_EXPORTS // defined if we are building the OpenRAVE DLL (instead of using it)
    #define MUJINPLANNINGCLIENT_API MUJINPLANNINGCLIENT_HELPER_DLL_EXPORT
  #else
    #define MUJINPLANNINGCLIENT_API MUJINPLANNINGCLIENT_HELPER_DLL_IMPORT
  #endif // MUJINPLANNINGCLIENT_DLL_EXPORTS
  #define MUJINPLANNINGCLIENT_LOCAL MUJINPLANNINGCLIENT_HELPER_DLL_LOCAL
#else // MUJINPLANNINGCLIENT_DLL is not defined: this means OpenRAVE is a static lib.
  #define MUJINPLANNINGCLIENT_API
  #define MUJINPLANNINGCLIENT_LOCAL
#endif // MUJINPLANNINGCLIENT_DLL

#define MUJINPLANNINGCLIENT_VERSION_MAJOR @MUJINPLANNINGCLIENT_VERSION_MAJOR@
#define MUJINPLANNINGCLIENT_VERSION_MINOR @MUJINPLANNINGCLIENT_VERSION_MINOR@
#define MUJINPLANNINGCLIENT_VERSION_PATCH @MUJINPLANNINGCLIENT_VERSION_PATCH@
#define MUJINPLANNINGCLIENT_VERSION_COMBINED(major, minor, patch) (((major) << 16) | ((minor) << 8) | (patch))
#define MUJINPLANNINGCLIENT_VERSION MUJINPLANNINGCLIENT_VERSION_COMBINED(MUJINPLANNINGCLIENT_VERSION_MAJOR, MUJINPLANNINGCLIENT_VERSION_MINOR, MUJINPLANNINGCLIENT_VERSION_PATCH)
#define MUJINPLANNINGCLIENT_VERSION_EXTRACT_MAJOR(version) (((version)>>16)&0xff)
#define MUJINPLANNINGCLIENT_VERSION_EXTRACT_MINOR(version) (((version)>>8)&0xff)
#define MUJINPLANNINGCLIENT_VERSION_EXTRACT_PATCH(version) (((version))&0xff)
#define MUJINPLANNINGCLIENT_VERSION_STRING "@MUJINPLANNINGCLIENT_VERSION_MAJOR@.@MUJINPLANNINGCLIENT_VERSION_MINOR@.@MUJINPLANNINGCLIENT_VERSION_PATCH@"
#define MUJINPLANNINGCLIENT_VERSION_STRING_FORMAT(version) boost::str(boost::format("%s.%s.%s")%(MUJINPLANNINGCLIENT_VERSION_EXTRACT_MAJOR(version))%(MUJINPLANNINGCLIENT_VERSION_EXTRACT_MINOR(version))%(MUJINPLANNINGCLIENT_VERSION_EXTRACT_PATCH(version)))

#define MUJINPLANNINGCLIENT_VERSION_GE(major1, minor1, patch1, major2, minor2, patch2) (MUJINPLANNINGCLIENT_VERSION_COMBINED(major1, minor1, patch1) >= MUJINPLANNINGCLIENT_VERSION_COMBINED(major2, minor2, patch2))
#define MUJINPLANNINGCLIENT_VERSION_MINIMUM(major, minor, patch) MUJINPLANNINGCLIENT_VERSION_GE(MUJINPLANNINGCLIENT_VERSION_MAJOR, MUJINPLANNINGCLIENT_VERSION_MINOR, MUJINPLANNINGCLIENT_VERSION_PATCH, major, minor, patch)

// whether log4cxx is to be used
#define MUJINPLANNINGCLIENT_LOG4CXX @MUJINPLANNINGCLIENT_LOG4CXX@
#define MUJIN_USEZMQ @MUJIN_USEZMQ@

#endif
